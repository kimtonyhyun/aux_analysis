function show_behavior(behavior_data, dlc_bottom)
% Produces a very basic plot of velocity, reward delivery, and licks.
%
% Here, 'behavior_data' is the behavior struct that is generated by the
% function `parse_ctxstr.m`

t = behavior_data.velocity(:,1); % Time (s)
v = behavior_data.velocity(:,2); % Velocity (cm/s)

t_dlc = behavior_data.frame_times(1:end);
coord = dlc_bottom.forelimb1(:,1);

ax2 = subplot(212);
plot(t_dlc, coord);
hold on;
set(gca, 'TickLength', [0 0]);
c_range = [350 625];
ylim(c_range);
xlabel('Time (s)');
ylabel('dlc\_bottom.forelimb1 x-coord (px)');
set(gca, 'FontSize', 24);

ax1 = subplot(211);
plot(t,v);
hold on;
xlim([t(1) t(end)]);
xlabel('Time (s)');
v_min = min(v);
v_max = max(v);
v_range = 0.05*(v_max-v_min)*[-1 1] + [v_min v_max];
ylim(v_range);
ylabel('Velocity (cm/s)');
set(gca, 'TickLength', [0 0]);
zoom xon;
set(gca, 'FontSize', 24);
linkaxes([ax1,ax2], 'x');

num_rewards = length(behavior_data.us_times);
for k = 1:num_rewards
    us_time = behavior_data.us_times(k);
    
    subplot(ax1);
    plot(us_time*[1 1], v_range, 'k');
    
    subplot(ax2);
    plot(us_time*[1 1], c_range, 'k');
end

subplot(ax1);
num_licks = length(behavior_data.lick_times);
lick_tick_len = 0.1*diff(v_range);
for k = 1:num_licks
    lick_time = behavior_data.lick_times(k);
    plot(lick_time*[1 1], [v_range(2)-lick_tick_len v_range(2)], 'r');
end

hold off;
